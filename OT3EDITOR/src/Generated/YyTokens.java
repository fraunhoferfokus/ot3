package Generated;
import Gently.*;
// GramGen 4-YyTokens
public class YyTokens
{
public static int Identifier = 258;
public static int FLOATVALUE = 259;
public static int NUMBER = 260;
public static int BSTRING = 261;
public static int HSTRING = 262;
public static int OSTRING = 263;
public static int CSTRING = 264;
public static int T_until = 265;
public static int T_par = 266;
public static int T_seq = 267;
public static int T_onexit = 268;
public static int T_inv = 269;
public static int T_onentry = 270;
public static int T_cont = 271;
public static int T_assert = 272;
public static int T_violates = 273;
public static int T_find = 274;
public static int T_notinv = 275;
public static int T_finished = 276;
public static int T_duration = 277;
public static int T_at = 278;
public static int T_prev = 279;
public static int T_values = 280;
public static int T_history = 281;
public static int T_delta = 282;
public static int T_stream = 283;
public static int T_wait = 284;
public static int T_timestamp = 285;
public static int T_null = 286;
public static int T_case = 287;
public static int T_select = 288;
public static int T_if = 289;
public static int T_do = 290;
public static int T_while = 291;
public static int T_for = 292;
public static int T_log = 293;
public static int T__atsign__greater_ = 294;
public static int T__less__atsign_ = 295;
public static int T__greater__greater_ = 296;
public static int T__less__less_ = 297;
public static int T__exclamation__equal_ = 298;
public static int T__equal__equal_ = 299;
public static int T__less__equal_ = 300;
public static int T__greater__equal_ = 301;
public static int T__greater_ = 302;
public static int T__less_ = 303;
public static int T_rem = 304;
public static int T_mod = 305;
public static int T__slash_ = 306;
public static int T__plus_ = 307;
public static int T_now = 308;
public static int T_getverdict = 309;
public static int T_not4b = 310;
public static int T_and4b = 311;
public static int T_xor4b = 312;
public static int T_or4b = 313;
public static int T_not = 314;
public static int T_and = 315;
public static int T_xor = 316;
public static int T_or = 317;
public static int T_deactivate = 318;
public static int T_activate = 319;
public static int T_goto = 320;
public static int T_label = 321;
public static int T_interleave = 322;
public static int T_else = 323;
public static int T_alt = 324;
public static int T_action = 325;
public static int T_setverdict = 326;
public static int T_continue = 327;
public static int T_break = 328;
public static int T_repeat = 329;
public static int T_stepsize = 330;
public static int T_extension = 331;
public static int T_display = 332;
public static int T_variant = 333;
public static int T_encode = 334;
public static int T_override = 335;
public static int T_with = 336;
public static int T_present = 337;
public static int T_char = 338;
public static int T_error = 339;
public static int T_none = 340;
public static int T_inconc = 341;
public static int T_fail = 342;
public static int T_pass = 343;
public static int T_false = 344;
public static int T_true = 345;
public static int T__underscore_xxx_underscore_ = 346;
public static int T_omit = 347;
public static int T_universal = 348;
public static int T_configuration = 349;
public static int T_anytype = 350;
public static int T_default = 351;
public static int T_float = 352;
public static int T_verdicttype = 353;
public static int T_hexstring = 354;
public static int T_octetstring = 355;
public static int T_integer = 356;
public static int T_charstring = 357;
public static int T_boolean = 358;
public static int T_bitstring = 359;
public static int T_read = 360;
public static int T_checkstate = 361;
public static int T_halt = 362;
public static int T_clear = 363;
public static int T_timeout = 364;
public static int T_catch = 365;
public static int T_check = 366;
public static int T_getreply = 367;
public static int T_getcall = 368;
public static int T_trigger = 369;
public static int T_sender = 370;
public static int T__minus__greater_ = 371;
public static int T_receive = 372;
public static int T_raise = 373;
public static int T_value = 374;
public static int T_reply = 375;
public static int T_nowait = 376;
public static int T_call = 377;
public static int T_to = 378;
public static int T_send = 379;
public static int T_kill = 380;
public static int T_start = 381;
public static int T_disconnect = 382;
public static int T_connect = 383;
public static int T_running = 384;
public static int T_any = 385;
public static int T_killed = 386;
public static int T_done = 387;
public static int T_static = 388;
public static int T_alive = 389;
public static int T_create = 390;
public static int T_mtc = 391;
public static int T_timer = 392;
public static int T_var = 393;
public static int T_stop = 394;
public static int T_control = 395;
public static int T_external = 396;
public static int T_recursive = 397;
public static int T_from = 398;
public static int T_modulepar = 399;
public static int T_group = 400;
public static int T_except = 401;
public static int T_import = 402;
public static int T_altstep = 403;
public static int T_execute = 404;
public static int T_system = 405;
public static int T_testcase = 406;
public static int T_exception = 407;
public static int T_noblock = 408;
public static int T_signature = 409;
public static int T_apply = 410;
public static int T_self = 411;
public static int T_on = 412;
public static int T_runs = 413;
public static int T_return = 414;
public static int T_function = 415;
public static int T_valueof = 416;
public static int T_match = 417;
public static int T__colon_ = 418;
public static int T_infinity = 419;
public static int T__exclamation_ = 420;
public static int T_permutation = 421;
public static int T_superset = 422;
public static int T_subset = 423;
public static int T_complement = 424;
public static int T_pattern = 425;
public static int T_ifpresent = 426;
public static int T__asterisk_ = 427;
public static int T__question_ = 428;
public static int T__rbracket_ = 429;
public static int T__lbracket_ = 430;
public static int T__ampersand_ = 431;
public static int T_modifies = 432;
public static int T_template = 433;
public static int T_const = 434;
public static int T__colon__equal_ = 435;
public static int T__dot_ = 436;
public static int T_extends = 437;
public static int T_component = 438;
public static int T_mixed = 439;
public static int T_procedure = 440;
public static int T_all = 441;
public static int T_inout = 442;
public static int T_out = 443;
public static int T_in = 444;
public static int T_unmap = 445;
public static int T_param = 446;
public static int T_map = 447;
public static int T_realtime = 448;
public static int T_message = 449;
public static int T_port = 450;
public static int T_length = 451;
public static int T__dot__dot_ = 452;
public static int T__rparen_ = 453;
public static int T__minus_ = 454;
public static int T__lparen_ = 455;
public static int T_enumerated = 456;
public static int T_of = 457;
public static int T_set = 458;
public static int T_union = 459;
public static int T_optional = 460;
public static int T_address = 461;
public static int T_record = 462;
public static int T_type = 463;
public static int T_friend = 464;
public static int T_private = 465;
public static int T_public = 466;
public static int T__comma_ = 467;
public static int T_language = 468;
public static int T__semicolon_ = 469;
public static int T__rbrace_ = 470;
public static int T__lbrace_ = 471;
public static int T_module = 472;
public static int GetColor(int i)
{
   if (i == T_module) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__lbrace_) return 2;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__rbrace_) return 2;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__semicolon_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_language) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__comma_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_public) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_private) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_friend) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_type) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_record) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_address) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_optional) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_union) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_set) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_of) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_enumerated) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__lparen_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__minus_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__rparen_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__dot__dot_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_length) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_port) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_message) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_realtime) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_map) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_param) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_unmap) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_in) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_out) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_inout) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_all) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_procedure) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_mixed) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_component) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_extends) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__dot_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__colon__equal_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_const) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_template) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_modifies) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__ampersand_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__lbracket_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__rbracket_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__question_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__asterisk_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_ifpresent) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_pattern) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_complement) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_subset) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_superset) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_permutation) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__exclamation_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_infinity) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__colon_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_match) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_valueof) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_function) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_return) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_runs) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_on) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_self) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_apply) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_signature) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_noblock) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_exception) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_testcase) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_system) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_execute) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_altstep) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_import) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_except) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_group) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_modulepar) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_from) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_recursive) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_external) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_control) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_stop) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_var) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_timer) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_mtc) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_create) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_alive) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_static) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_done) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_killed) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_any) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_running) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_connect) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_disconnect) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_start) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_kill) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_send) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_to) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_call) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_nowait) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_reply) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_value) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_raise) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_receive) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__minus__greater_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_sender) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_trigger) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_getcall) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_getreply) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_check) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_catch) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_timeout) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_clear) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_halt) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_checkstate) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_read) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_bitstring) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_boolean) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_charstring) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_integer) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_octetstring) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_hexstring) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_verdicttype) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_float) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_default) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_anytype) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_configuration) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_universal) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_omit) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__underscore_xxx_underscore_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_true) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_false) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_pass) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_fail) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_inconc) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_none) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_error) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_char) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_present) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_with) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_override) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_encode) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_variant) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_display) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_extension) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_stepsize) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_repeat) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_break) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_continue) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_setverdict) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_action) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_alt) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_else) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_interleave) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_label) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_goto) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_activate) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_deactivate) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_or) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_xor) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_and) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_not) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_or4b) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_xor4b) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_and4b) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_not4b) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_getverdict) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_now) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__plus_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__slash_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_mod) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_rem) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__less_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__greater_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__greater__equal_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__less__equal_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__equal__equal_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__exclamation__equal_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__less__less_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__greater__greater_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__less__atsign_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T__atsign__greater_) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_log) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_for) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_while) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_do) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_if) return 1;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_select) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_case) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_null) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_timestamp) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_wait) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_stream) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_delta) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_history) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_values) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_prev) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_at) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_duration) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_finished) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_notinv) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_find) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_violates) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_assert) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_cont) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_onentry) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_inv) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_onexit) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_seq) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_par) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == T_until) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == CSTRING) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == OSTRING) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == HSTRING) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == BSTRING) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == NUMBER) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == FLOATVALUE) return 0;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   if (i == Identifier) return 3;
   if (i == Gently.GrammarLib.WhitespaceToken) return 1;
   return 666;
}
}
